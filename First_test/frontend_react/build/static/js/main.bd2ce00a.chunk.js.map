{"version":3,"sources":["logo.svg","api.js","pages/LoginPage.js","PrivateRoute.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","request","url","method","body","Promise","resolve","reject","fetch","process","headers","sessionStorage","getItem","then","res","status","json","login","email","password","JSON","stringify","expiration_date","Date","setFullYear","getFullYear","setItem","access_token","document","cookie","refresh_token","toUTCString","catch","logout","isLoggedIn","LoginPage","props","handleInputChange","field","e","setState","target","value","handleLogin","state","checkLogin","dialogTitle","dialogContent","dialogOpen","handleRegistrationBtn","dialogHandleClose","name","paleoIdUrl","encodeURIComponent","Container","style","alignItems","marginTop","Paper","maxWidth","padding","margin","noValidate","autoComplete","Typography","variant","textAlign","TextField","id","label","fullWidth","onChange","type","width","Button","marginRight","onClick","this","marginLeft","color","href","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","React","Component","PrivateRoute","component","auth","wasInitialized","rest","render","to","HomePage","handleLogout","display","App","componentDidMount","chechLogin","console","log","CircularProgress","AppBar","position","Toolbar","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bd2ce00a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const api = {\r\n    request: (url = \"\", method = \"GET\", body = null) => {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(process.env.REACT_APP_API_URL + url, {\r\n                method: method,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + sessionStorage.getItem('access_token')\r\n                },\r\n                body: body\r\n            }).then(res => {\r\n                if (res.status !== 200) {\r\n                    reject();\r\n                } else {\r\n                    res.json().then(res => {\r\n                        resolve(res);\r\n                    })\r\n                }\r\n            });\r\n        });\r\n    },\r\n    login: (email, password) => {\r\n        return new Promise((resolve, reject) => {\r\n            api.request('/auth/login', 'POST', JSON.stringify({email: email, password: password})).then(res => {\r\n                var expiration_date = new Date();\r\n                expiration_date.setFullYear(expiration_date.getFullYear() + 1);\r\n                sessionStorage.setItem('access_token', res.access_token);\r\n                document.cookie = \"refresh_token=\" + res.refresh_token + \"; expires=\" + expiration_date.toUTCString() + \"; path=/\";\r\n                resolve();\r\n            }).catch(() => {\r\n                reject();\r\n            })\r\n        });\r\n    },\r\n    logout: () => {\r\n        var expiration_date = new Date();\r\n        expiration_date.setFullYear(expiration_date.getFullYear() + 1);\r\n        sessionStorage.setItem('access_token', null);\r\n        document.cookie = \"refresh_token=; expires=\" + expiration_date.toUTCString() + \"; path=/\";\r\n    },\r\n    isLoggedIn: () => {\r\n        return new Promise((resolve, reject) => {\r\n            api.request('/users/profile').then(res => {\r\n                resolve();\r\n            }).catch(() => {\r\n                reject();\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\nexport default api;","import React from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport api from \"../api\";\r\n\r\nclass LoginPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {name: '', email: '', password: ''}\r\n        this.state.paleoIdUrl = process.env.REACT_APP_PALEOID_URL + '/oauth/authorize?client_id=' + process.env.REACT_APP_PALEOID_CLIENT_ID + '&response_type=code&state=paleobooks&redirect_uri=' + encodeURIComponent(process.env.REACT_APP_PALEOID_REDIRECT_URI);\r\n    }\r\n\r\n    handleInputChange = (field, e) => {\r\n        this.setState({[field]: e.target.value});\r\n    }\r\n\r\n    handleLogin = () => {\r\n        api.login(this.state.email, this.state.password).then((res) => {\r\n            this.props.checkLogin();\r\n        }).catch(() => {\r\n            this.setState({dialogTitle: 'Errore', dialogContent: 'Credenziali non valide', dialogOpen: true});\r\n        })\r\n    }\r\n\r\n    handleRegistrationBtn = () => {\r\n        /* TODO: implementare registrazione (si potrebbe fare un form in un dialog che compare premendo questo pulsante) */\r\n        this.setState({\r\n            dialogTitle: 'Attenzione',\r\n            dialogContent: 'Questa funzione non Ã¨ ancora disponibile',\r\n            dialogOpen: true\r\n        });\r\n    }\r\n\r\n    dialogHandleClose = () => {\r\n        this.setState({dialogOpen: false});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container style={{alignItems: 'center', marginTop: '10px'}}>\r\n                <Paper style={{maxWidth: '500px', padding: '15px', margin: '0 auto'}}>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <Typography variant=\"h4\" style={{textAlign: 'center'}}>\r\n                            Login\r\n                        </Typography>\r\n                        <TextField id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" fullWidth\r\n                                   style={{marginTop: '10px'}} onChange={(e) => this.handleInputChange('email', e)}/>\r\n                        <TextField id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" fullWidth type=\"password\"\r\n                                   style={{marginTop: '10px'}} onChange={(e) => this.handleInputChange('password', e)}/>\r\n                        <div style={{width: 'fit-content', margin: '12px auto 10px'}}>\r\n                            <Button variant=\"contained\" style={{marginRight: '4px'}}\r\n                                    onClick={this.handleLogin}>Accedi</Button>\r\n                            <Button variant=\"contained\" style={{marginLeft: '4px'}}\r\n                                    onClick={this.handleRegistrationBtn}>Registrati</Button>\r\n                        </div>\r\n                        <div style={{width: 'fit-content', margin: '20px auto 0px'}}>\r\n                            <Button variant=\"contained\" color=\"primary\" href={this.state.paleoIdUrl}>\r\n                                Accedi con PaleoID\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </Paper>\r\n                <Dialog\r\n                    open={this.state.dialogOpen}\r\n                    onClose={this.dialogHandleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{this.state.dialogTitle}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            {this.state.dialogContent}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.dialogHandleClose} color=\"primary\" autoFocus>\r\n                            Chiudi\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React from \"react\";\r\nimport {Route, Redirect} from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({\r\n                          component: Component,\r\n                          auth,\r\n                          wasInitialized,\r\n                          ...rest\r\n                      }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                auth === true ? (\r\n                    <Component {...props} />\r\n                ) : !wasInitialized ? (\r\n                    \"\"\r\n                ) : (\r\n                    <Redirect to=\"/login\"/>\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport api from \"../api\";\r\n\r\nclass HomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleLogout = () => {\r\n        api.logout();\r\n        this.props.checkLogin();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Typography variant=\"h4\" style={{textAlign: 'center', marginTop: '15px'}}>\r\n                    Sono la home page!\r\n                </Typography>\r\n                <Button variant=\"contained\" color=\"secondary\" style={{margin: '10px auto', display: 'block'}}\r\n                        onClick={this.handleLogout}>Logout</Button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport api from \"./api\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport HomePage from \"./pages/HomePage\";\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {isLoggedIn: null, wasInitialized: false}\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.chechLogin();\r\n    }\r\n\r\n    chechLogin = () => {\r\n        api.isLoggedIn().then(() => {\r\n            this.setState({isLoggedIn: true, wasInitialized: true});\r\n            console.log(true);\r\n        }).catch(() => {\r\n            this.setState({isLoggedIn: false, wasInitialized: true});\r\n            console.log(false);\r\n        });\r\n    }\r\n\r\n    render = () => {\r\n        if (this.state.isLoggedIn === null) return <div style={{margin: '20px auto', width: 'fit-content'}}><CircularProgress /></div>;\r\n        return (\r\n            <BrowserRouter>\r\n                <AppBar position=\"static\" style={{alignItems: 'center'}}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">\r\n                            PaleoBooks\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Switch>\r\n                    <PrivateRoute auth={this.state.isLoggedIn} wasInitialized={this.state.wasInitialized} exact component={() => <HomePage checkLogin={this.chechLogin} />} path=\"/\"/>\r\n                    <Route exact path=\"/login\">\r\n                        {this.state.isLoggedIn\r\n                            ? <Redirect to=\"\"/>\r\n                            : <LoginPage checkLogin={this.chechLogin}/>}\r\n                    </Route>\r\n                    <Route path=\"*\">\r\n                        <Redirect to=\"\"/>\r\n                    </Route>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}